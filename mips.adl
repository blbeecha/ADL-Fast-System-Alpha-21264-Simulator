#- MIPS single issue pipeline - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                                                                      #
#  The pipeline is a 6-stage pipeline IF ID RF EX MEM WB and two floating point pipelines.                             #
#                                                                                                                      #
#  A branch predictor (gshare) and a direct-mapped BTB is included. The branches resolve in EX, so it has a 3-cycle    #
#  misprediction penalty.                                                                                              #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

processor processor_0 
         (highbit   = 31,
          system    = linux,
          flags     = "-O3 -fcse-follow-jumps -frerun-cse-after-loop",
          watchdog  = 2000
         )
begin

lilliput little_endian; 
Machineid "std-mips-pipelined-ex-btb-bp";

constant  
     use_itrace      0,   #- Set only one of them.
     generate_itrace 0;   #

constant
     pht_size               8192,
     choice_pht_size        8192,
     local_ht_size         10240,
     local_pht_size         3072,
     btb_entries          131072,    #- In entries. Needs to be a power of two.
     branch_global_bits       12,    #- global history size
     branch_local_bits        10,    #- Local history size

     branch_predictor        4,      #- Equate branch_predictor value to the predictor identifier to select.
     gshare_predictor        1,
     tournament_predictor    4,      #- Create new copy of gshare_predictor to modify to new pipeline
     counter_initial_value   2,
     counter_max_value       3,
     local_counter_max_val   7,
     #
     pht_entries             pht_size * 8 / 2, #- Assuming 2 bit counters.    
     local_pht_entries       local_pht_size * 8 / 3, #- Assuming 3 bit counters.
     local_ht_entries        local_ht_size, #- Assuming 10 bit counters.    
     branch_history_mask     pht_entries - 1,
     lbranch_history_mask    local_pht_entries - 1,      
     branch_target_mask      btb_entries - 1;

integer
     btb_hits             64,
     correct_predictions  64,
     global_hit_count     64,
     local_hit_count      64,
     global_total_count   64,
     local_total_count    64,
     conditional_branches 64,
     number_of_branches   64;

integer
   statistics_on            1,       #- Stat_on off
   exception                1,       #- Set by div and divu instructions. 
   linebreak               32,       #- Filler value for single-step monitor formatting.
   #
   float_compare_less       1,       #- Float compare instruction in the instruction set needs these three.
   float_compare_equal      1, 
   float_compare_unordered  1;

integer array dtemp[2,32];           #- Workarea for fixed-point to double conversion.
integer file scratch[128,32];        #- Used for formatting file names and messages.
integer file data_l [128,32];        #- Used for tandem verification with another simulator.
integer ex_trace;                    #- File descriptor for reading/writing traces.

stall category
     syscall_ref,
     latency_f,       # Floating point latency.
     latency_d,       # Divide latency.
     latency_m,       # Multiply latency.
     fpaddfull,       # Floating add pipeline is full with long latency op.
     fpmulfull,       # Floating multiply pipeline is full with lo la op.
     mem_ic,
     mem_dc,
     fl_d_dep,
     ld_d_dep,
     float_cc;

# Next, each machine register mnemonic is presented together with their 
# actual register number. For MIPS $zero and $0 are aliases, so are many
# others. From the perspective of the machine-gen, only the association 
# of names with numbers is important. Therefore, as many aliases as 
# necessary can be described.

external
begin
   int  fast_open_file(void *,char *);
   int  fast_write_file(int,int,int *);
   int  fast_read_file(int,int,int *);
   int  fast_strlen(int *);
   void perror(char *);
   void exit(int);

   char * percent(long long int, long long int);
   char *getenv(const char *);
   int sprintf(char *,const char *,...);
   int printf(const char *,...);
   void simulator_pause(void *,int);
   int write(int,void *,int);
   int strlen(char *);
   int flush(int);
end external;
%%
int fast_strlen(int *a)
{
 return strlen((char *)a);
}
%%

register file gpr [78,32];
register file gpr_tag [78,1];

# We have to specify the name of the instruction register. The instruction
# register is treated as a special register to allow less typing. That is,
# ir.rt is equivalent to rt iff ir is the instruction register.

instruction register ir 32;
instruction pointer  pc 32;

memory mem0 latency 100 width 64;
data        cache L2 of mem0 256 4;     #- 256 KB 4 words/line
#instruction cache icache of L2 64 2;    #- 64 kilobytes. 2 words/line

memory icache latency 0 width 64;

# This is the data cache.
#
#data cache dcache of mem0  64 4;              # 64 kilobytes. 4 words/line
memory dcache latency 0 width 32;


# This is the instruction pipeline. 
#
pipeline IPIPE       (s_IF, s_ID, s_RF, s_EX, s_MEM, s_WB);
pipeline FP_ADD      (f_add1, f_add2, f_add3);
pipeline FP_MULTIPLY (f_mul1, f_mul2, f_mul3);

source s_IF;


integer
   hi_val        32,
   lo_val        32,
   new_pc        32,
   branch_input   1,
   new_target    32;

# procedures that have the name of a pipeline stage are called 
# at the beginning (prologue) or at the end (epilogue) for each
# staged code corresponding to this stage identifier.


controldata register
   my_pc          32,
   branch_target  32,
   my_btb_index   32,
   my_pht_index   32,
   local_pht_index 32,      # pht index for the local_pht
   measuredPrediction     32,      # Choice predictor for tournament predictor
   btb_hit         1,
   btb_type        6,
   prediction      1,
   lprediction     32,
   gprediction     32,
   predict_target  32,


   squashed        1,      #- Squashed instruction. Don't count.
   decoded         1,
   taken           1,
   is_branch       1,
   ls_bypass       1,
   mem_stat        1,
   access_type    32,
   byte            2,
   simm           32,     # Sign extended immediate.
   zimm           32,     # Zero extended immediate.
   literal        16,
   smdr           32, 
   lmar           32,     # load memory address register.
   lmdr           32,     # load memory data register.
   smar           32,     # store memory address register.
   dest           32,     # dest holds the value to be written.           
   dest2          32,     # dest holds the value to be written.           
   #
   dest_r          8,
   dest2_r         8,
   lop_r           8,
   lop2_r          8,
   rop_r           8,   
   rop2_r          8,
   #
   lop            32,     # lop holds the left operand value.
   lop2           32,     # 
   rop            32,     # rop holds the right operand value.
   rop2           32;     # 



bitconstant
   _BYTE        0 0,
   _HALFWORD    0 1,
   _TRIPLEBYTE  1 0,
   _WORD        1 1;

#- Instruction Set Description  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#  =====                                                                                                               #
#                                                                                                                      #
#  Description.                                                                                                        #
#      Instruction set expects an untyped procedure for memory accesses. This procedure must be supplied with an       #
#      address and returns the value in the lmdr controldata variable.                                                 #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

procedure read_memory(addr:32) untyped
begin
   lmdr = dcache [addr];
end read_memory;

$include mips-instruction-set.adl


#- Branch target buffer implementation  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                                                                      #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

structure branch_target_buffer
begin
   my_address        : 32;
   b1_branch_type    :  6;
   b1_target_address : 32;
end;

branch_target_buffer file btb [btb_entries];
integer array pht[pht_entries,2];
integer array local_pht[local_pht_entries, 3];      #for use in choice with tournament_predictor
integer array local_bht[local_ht_entries, 10];
integer array choice_pht[pht_entries, 2];

#- access_btb  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
#                                                                                                      #
#  Description.                                                                                        #
#     Access btb and check for hit/miss.                                                               #
#                                                                                                      #
#  Global variables.                                                                                   #
#     None.                                                                                            #
#     Context only.                                                                                    #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

procedure access_btb untyped
begin
   local btb_index;
   local pc_val;

   pc_val = my_pc;
   btb_index = (pc_val >> 2) & branch_target_mask;

   if BTB[btb_index].my_address == pc_val then
      begin
         btb_hit=true;
         btb_type = BTB[btb_index].b1_branch_type;
      end
   else
      btb_hit=false;
   my_btb_index = btb_index;
end access_btb;

procedure initialize_btb_entry untyped
begin
   local i;
   
   i=my_btb_index;
   btb[i].my_address     = 0;
   btb[i].b1_branch_type = 0;
   btb[i].b1_target_address = 0;
end initialize_btb_entry;

integer 
   pht_index,
   branch_gr,
   rb_branch_gr,
   rb_local_gr,
   branch_lr,        #used for tournament local history variable
   debug_value;


procedure predict_taken_not_taken untyped [branch_predictor == gshare_predictor]
begin
   local counter_val;
   local target_addr;
   local btb_index;
   local predict;

   if btb_hit then
      begin
         pht_index = ((my_pc >> 2) ^ branch_GR) & branch_history_mask;
         btb_index = my_btb_index;
         my_pht_index = pht_index;

         counter_val = local_counter_max_val;
         new_pc = btb[btb_index].b1_target_address;

         case btb[btb_index].b1_branch_type of
         begin
            conditional_direct          :
            conditional_direct_link     :
                        counter_val = pht[pht_index];
                        predict = counter_val.[1:1];

            unconditional_indirect      :
            unconditional_indirect_link :
            unconditional_direct_link   :
                        predict=true;
                        new_pc = btb[btb_index].b1_target_address;

            unconditional_direct        :
                        predict = true;
                        new_pc = btb[btb_index].b1_target_address;
         end;

         if predict == 0 then
           new_pc = my_pc + 4;

        branch_gr=((branch_GR << 1) | (predict>0)) & all1s(branch_global_bits);
      end
   else
      new_pc = my_pc + 4;

   predict_target = new_pc;
   prediction = predict;
end predict_taken_not_taken [branch_predictor == gshare_predictor];

procedure update_predictor untyped [branch_predictor == gshare_predictor]
   begin

      #- update BTB & PHT
      btb[my_btb_index].b1_branch_type = ordinal(c_detail);
      btb[my_btb_index].my_address = my_pc;
      btb[my_btb_index].b1_target_address = branch_target;

end update_predictor [branch_predictor == gshare_predictor];


# Here is the new tournament predictor #
procedure predict_taken_not_taken untyped [branch_predictor == tournament_predictor]
begin
   local counter_val;
   local counter_val_global;
   local counter_val_local;
   local target_addr;
   local btb_index;
   local choice;
   local global_history_bits;
   local local_history_bits;
   local predict;
   local local_index;

   if btb_hit then
      begin
         pht_index = ((my_pc >> 2) ^ branch_GR) & branch_history_mask;
         global_history_bits = ((my_pc >> 2) ^ branch_GR) & branch_history_mask;
         choice = choice_pht[global_history_bits];                       #determine what the next direction will be
         
         local_index = (my_pc >> 2) & 0x3ff;          #0x3ff is the branch_history_table_mask
         local_history_bits = local_bht[local_index] & lbranch_history_mask;
         local_pht_index = local_history_bits;

         measuredPrediction = 0;

         btb_index = my_btb_index;
         counter_val = local_counter_max_val;
         new_pc = btb[btb_index].b1_target_address;

         case btb[btb_index].b1_branch_type of
         begin
            conditional_direct          :
            conditional_direct_link     :
                        counter_val = local_pht[local_pht_index];
                        lprediction = counter_val.[1:1];

            unconditional_indirect      :
            unconditional_indirect_link :
            unconditional_direct_link   :
                        lprediction = true;
                        new_pc = btb[btb_index].b1_target_address;
                     
            unconditional_direct        :
                        lprediction = true;
                        new_pc = btb[btb_index].b1_target_address;
         end;
         
         btb_index = my_btb_index;
         my_pht_index = pht_index;
      
         counter_val = counter_max_value;
         new_pc = btb[btb_index].b1_target_address;

         case btb[btb_index].b1_branch_type of
         begin
            conditional_direct          :
            conditional_direct_link     :
                        counter_val = pht[pht_index];
                        gprediction = counter_val.[1:1];
                        
            unconditional_indirect      :
            unconditional_indirect_link :
            unconditional_direct_link   :
                        gprediction = true;
                        new_pc = btb[btb_index].b1_target_address;
                     
            unconditional_direct        :
                        gprediction = true;
                        new_pc = btb[btb_index].b1_target_address;
         end;

         if choice < 2 then
            begin
               measuredPrediction = 1;
               predict = lprediction;
            end
         else
            begin
               measuredPrediction = 2;
               predict = gprediction;
            end;

         if predict == 0 then
            new_pc = my_pc + 4;

         branch_gr=((branch_GR << 1) | (predict>0)) & all1s(branch_global_bits);
         local_bht[local_index] = ((local_bht[local_index] << 1) | (predict>0)) & all1s(branch_local_bits);

      end
   else
      new_pc = my_pc + 4;

   predict_target = new_pc;
   prediction = predict;
end predict_taken_not_taken [branch_predictor == tournament_predictor];
# end new predictor #

# tournament predictor update btb values #
procedure update_predictor untyped [branch_predictor == tournament_predictor]
   begin

      #- update BTB & PHT
      btb[my_btb_index].b1_branch_type = ordinal(c_detail);
      btb[my_btb_index].my_address = my_pc;
      btb[my_btb_index].b1_target_address = branch_target;

end update_predictor [branch_predictor == tournament_predictor];
# end of tournament predictor update #

procedure wrapup untyped
begin
   builtin append_global(" btb_hits=",btb_hits);
   builtin append_global(" branches=",number_of_branches);
   builtin append_global(" btb-hit-rate=");
   builtin append_percent(btb_hits,number_of_branches);
   builtin append_global(" global-accuracy=");
   builtin append_percent(global_hit_count, global_total_count);
   builtin append_global(" local-accuracy=");
   builtin append_percent(local_hit_count, local_total_count);
   builtin append_global(" tournament_hit-rate=");
   builtin append_percent(correct_predictions, conditional_branches);

end wrapup;

epilogue wrapup;

procedure do_forwarding_to_execute untyped
begin
   local dr_mem, dr_wb;
   local lop_s, rop_s;
   local lop2_s, rop2_s;

   lop_s  = lop_r  ^= 0;
   lop2_s = lop2_r ^= 0;
   rop_s  = rop_r  ^= 0;
   rop2_s = rop2_r ^= 0;

   if has_context s_MEM then dr_mem = dest_r[s_MEM] else dr_mem = 0;
   if has_context s_WB  then dr_wb  = dest_r[s_WB]  else dr_wb  = 0;

   if lop_s then 
      begin
         if (dr_mem == lop_r) & lop_s then
            lop = dest[s_MEM]
         else
         if (dr_wb == lop_r)  & lop_s then 
            lop = dest[s_WB];
      end;

   if lop2_s then 
      begin
         if (dr_mem == lop2_r) & lop2_s then
            lop2 = dest[s_MEM]
         else
         if (dr_wb == lop2_r)  & lop2_s then 
            lop2 = dest[s_WB];
      end;

   if rop_s then 
      begin
         if (dr_mem == rop_r) & rop_s then
            rop = dest[s_MEM]
         else
         if (dr_wb == rop_r)  & rop_s then 
            rop = dest[s_WB];
      end;

   if rop2_s then 
      begin
         if (dr_mem == rop2_r) & rop2_s then
            rop2 = dest[s_MEM]
         else
         if (dr_wb == rop2_r)  & rop2_s then 
            rop2 = dest[s_WB];
      end;
end do_forwarding_to_execute;

#- Instruction Fetch  - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                      #
#                                                                      #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

integer waiting_drain;

procedure s_IF prologue
begin
   #if has_context f_add1 then stall;
   #if has_context f_add2 then stall;
   #if has_context f_add3 then stall;
   #if has_context f_mul1 then stall;
   #if has_context f_mul2 then stall;
   #if has_context f_mul3 then stall;
   #if has_context s_WB   then stall; 
   #if has_context s_MEM  then stall; 
   #if has_context s_EX   then stall; 
   #if has_context s_RF   then stall; 
   #if has_context s_ID   then stall; 

   my_pc = pc;  access_btb; predict_taken_not_taken; 

   ir = icache[pc];
   if access_complete == 0 then 
      stall; 

   decode;           #- we are not really decoding here - this helps with debugging.
end s_IF;

procedure s_IF epilogue
begin
   local use_prediction;

   if squashed then 
      begin
         retire nostat; 
         use_prediction = false;
      end
   else
      begin
         send s_ID;
         use_prediction = true;
      end;

   if has_context myself then  #- Pipeline is blocked.
      stall;

   if use_prediction then
      pc = new_pc
   else
      pc = new_target;
   newcontext;
   ir = 0;
   decoded = 0;
   taken = 0;  
   squashed = 0;
   dest = 0;
   decode;           #- we are not really decoding here - this helps with debugging.
end s_IF;

#- Instruction Decode - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                      #
#                                                                      #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

procedure s_ID prologue
begin
   if decoded == 0 then 
      begin
         decode;
         is_branch=(i_type ==  branch_type_0) | (i_type ==  branch_type_1);
         if is_branch then 
            literal = immediate;

         dest_r  = ordinal(l_dest_r);
         dest2_r = ordinal(l_dest2_r);
         lop_r   = ordinal(l_lop_r);
         lop2_r  = ordinal(l_lop2_r);
         rop_r   = ordinal(l_rop_r);
         rop2_r  = ordinal(l_rop2_r);
   
         decoded = 1;
      end;
end s_ID;

procedure s_ID epilogue
begin
   if squashed then 
      retire nostat
   else
      send s_RF;
end s_ID;

procedure s_RF prologue
begin
   local load_flag_e;
   local load_flag_m;

   #  Fetch input registers. Sign extend the immediate portion.
   #
   if gpr_tag[dest_r] | gpr_tag[dest2_r] | gpr_tag[lop_r] | gpr_tag[lop2_r] | gpr_tag[rop_r] | gpr_tag[rop2_r] then 
      stall fl_d_dep;

   if has_context s_EX then
      begin
         if dest_type[s_EX] == special_input then stall syscall_ref;

         if dest_type [s_EX] == lo_hi_register then stall;
         load_flag_e= i_type[s_EX ] == load_type ;
         if (lop_r ^= 0) & (dest_r[s_EX]  == lop_r) & (load_flag_e | is_branch) then
            stall ld_d_dep; 

         if (rop_r ^= 0) & (dest_r[s_EX]  == rop_r) & (load_flag_e | is_branch) then
            stall ld_d_dep; 
      end;

   if has_context s_MEM then
      begin
         if dest_type[s_MEM] == special_input then stall syscall_ref;

         if dest_type [s_MEM] == lo_hi_register then stall;
         load_flag_m= i_type[s_MEM] == load_type;
         if (lop_r ^= 0) & (dest_r[s_MEM] == lop_r) & (load_flag_m & is_branch) then
            stall ld_d_dep;

         if (rop_r ^= 0) & (dest_r[s_MEM] == rop_r) & (load_flag_m & is_branch) then
            stall ld_d_dep;
      end;

   if has_context s_WB then
      begin
         if dest_type[s_WB] == special_input then stall syscall_ref;

         if dest_type [s_WB] == lo_hi_register then stall;
      end;
   
   lop  = gpr [lop_r];
   lop2 = gpr [lop2_r];
   rop  = gpr [rop_r];
   rop2 = gpr [rop2_r];

end s_RF;

procedure s_RF epilogue
begin
   if squashed then 
      begin
         retire nostat;
         return;
      end;

   if ((exu == integer_unit ) | (exu == load_unit) |(exu == store_unit)) & (send_enabled(s_EX) == 0) then
      stall;
 
   if (exu == f_add_unit) & (send_enabled(f_add1) == 0) then
      stall fpaddfull;

   if (exu == f_mul_unit) & (send_enabled(f_mul1) == 0) then
      stall fpmulfull;

   if (dest_type == cpc_register) | (dest_type == float_register) then
      gpr_tag[dest_r]=1
   else
   if dest_type == double_register then
      begin
         gpr_tag[dest_r]=1;
         gpr_tag[dest2_r]=1;
      end; 

   if exu == f_add_unit then
      send f_add1
   else
   if exu == f_mul_unit then
      send f_mul1
   else
      send s_EX;
end s_RF;

#- Instruction Execution  - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                      #
#                                                                      #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

procedure s_EX prologue
begin
   local next_pc;
   local local_index;
   local mispredict;

   do_forwarding_to_execute;

   if is_branch then
      begin
         if (c_what ^= condition_z) then
             branch_target=my_pc + sign_extend_14(literal);

         if i_class == float_class then
            branch_input=lop == tf          # gpr[$CpC+34] == tf
         else
            condition_code(lop,rop);

         taken = branch_input;
 
         if branch_input then 
            next_pc = branch_target
         else 
            next_pc = my_pc + 4;
 
         #- update BTB & PHT
         #
         btb[my_btb_index].b1_branch_type=ordinal(c_detail);
         btb[my_btb_index].my_address = my_pc;
         btb[my_btb_index].b1_target_address=branch_target;

         pht_index = my_pht_index;

         #update choice PHT
         if branch_input then
            begin
               if( (gprediction == branch_input) & (lprediction ^= branch_input) & (choice_pht[pht_index] ^= counter_max_value) ) then
                  begin
                     choice_pht[pht_index] = choice_pht[pht_index] + 1;
                  end
               else if ( (gprediction ^= branch_input) & (lprediction == branch_input) & (choice_pht[pht_index] ^= 0) ) then
                  begin
                     choice_pht[pht_index] = choice_pht[pht_index] - 1;
                  end;
            end;

         case c_detail of
         begin
            conditional_direct          :
            conditional_direct_link     :

                         if branch_input then
                            begin
                               if pht[pht_index] < counter_max_value then
                                  pht[pht_index]=pht[pht_index]+1;

                               if local_pht[local_pht_index] < local_counter_max_val then
                                  local_pht[local_pht_index]=local_pht[local_pht_index]+1;

                            end
                         else
                            begin
                               if pht[pht_index] > 0 then
                                  pht[pht_index]=pht[pht_index]-1;

                               if local_pht[local_pht_index] > 0 then
                                  local_pht[local_pht_index]=local_pht[local_pht_index]-1;

                            end;

                         if prediction == branch_input then 
                           begin
                              correct_predictions = correct_predictions + 1;
                              if measuredPrediction == 1 then 
                                 local_hit_count = local_hit_count + 1;
                              if measuredPrediction == 2 then
                                 global_hit_count = global_hit_count + 1;
                           end;
                        
                         if measuredPrediction == 1 then
                           local_total_count = local_total_count + 1;
                         if measuredPrediction == 2 then
                           global_total_count = global_total_count + 1;
                           
                         conditional_branches = conditional_branches + 1;
                              
         end;

         local_index = (my_pc >> 2) & 0x3ff;
         rb_branch_gr=((rb_branch_gr << 1) | (branch_input>0)) & all1s(branch_global_bits);
         rb_local_gr=((local_bht[local_index] << 1) | (branch_input>0)) & all1s(branch_local_bits);

         if (btb_hit == 0) | (prediction ^= branch_input) then
            begin
               branch_gr=rb_branch_gr;
               local_bht[local_index]=rb_local_gr;
            end;
           
         if next_pc ^= predict_target then
            begin
               mispredict = true;
               new_target = next_pc;
               if has_context s_RF then squashed[s_RF] = 1;
               if has_context s_ID then squashed[s_ID] = 1;
               if has_context s_IF then squashed[s_IF] = 1;
            end
         else
            mispredict = false;
      end;
end s_EX;

procedure s_EX epilogue
begin
   send s_MEM;
end s_EX;

#- Memory access - - - - - - - - - - - - - - - - - - - - - - - - - - - #
#                                                                      #
#                                                                      #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

procedure s_MEM prologue
begin
end s_MEM;

procedure s_MEM epilogue
begin
   if exu == load_unit then
      begin
         if mem_stat == 0 then
            stall;
      end;
   if exu == store_unit then
      begin
         dcache.(access_type) [smar] = smdr;
         if access_complete == 0 then
            stall;
      end;
   send s_WB;
end s_MEM;

#- Write-back - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                      #
#                                                                      #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

procedure s_WB prologue 
begin
   if dest_r then gpr[dest_r]=dest;  
   if dest2_r then gpr[dest2_r]=dest2;  
   gpr_tag[dest_r]=0;
   gpr_tag[dest2_r]=0;

end s_WB;

procedure s_WB epilogue
begin
   local pausing;

   if (use_itrace) then 
      begin
         pausing = 0;
         if fast_read_file(ex_trace,12,data_l) ^= 12 then
            begin
               perror("fast_read_file");
               exit(-1);
            end;

         if data_l [0] ^= my_pc then
            begin
               sprintf(pointer(scratch),"Expecting PC %08x \n",data_l[0]);
               write(2,pointer(scratch),fast_strlen(scratch));
               pausing = pausing + 1;
            end;

         if taken ^= data_l[1] then 
            begin
               sprintf(pointer(scratch),"%08x expecting value %08x, taken is %08x \n",my_pc, data_l [1],taken);
               write(2,pointer(scratch),fast_strlen(scratch));
               pausing = pausing + 1;
            end;

         if dest  ^= data_l[2] then 
            begin
               sprintf(pointer(scratch),"%08x expecting value %08x, dest is %08x \n",my_pc, data_l [2],dest);
               write(2,pointer(scratch),fast_strlen(scratch));
               pausing = pausing + 1;
            end;
         if pausing then pause;
      end;

   if (generate_itrace) then 
      begin
         data_l [0] = my_pc;
         data_l [1] = taken;
         data_l [2] = dest;
         if fast_write_file(ex_trace,12,data_l) ^= 12 then
            begin
               perror("fast_write_file");
               exit(-1);
            end;
      end;

   if is_branch then 
      begin
         if btb_hit then btb_hits = btb_hits+1;
         number_of_branches = number_of_branches + 1;
      end;
   retire stat;
end s_WB;

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                       #
#  Floating point add pipeline.                                         #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

procedure f_add1 prologue
begin
end f_add1;

procedure f_add1 epilogue
begin
   send f_add2;
end f_add1;

procedure f_add2 prologue
begin
end f_add2;

procedure f_add2 epilogue
begin
   send f_add3;
end f_add2;

procedure f_add3 prologue
begin
end f_add3;

procedure f_add3 epilogue
begin
   send s_wb;
end f_add3;

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                       #
#  Floating point multiply pipeline.                                    #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

procedure f_mul1 prologue
begin
end f_mul1;

procedure f_mul1 epilogue
begin
   send f_mul2;
end f_mul1;

procedure f_mul2 prologue
begin
end f_mul2;

procedure f_mul2 epilogue
begin
   send f_mul3;
end f_mul2;

procedure f_mul3 prologue
begin
end f_mul3;

procedure f_mul3 epilogue
begin
   send s_wb;
end f_mul3;

procedure boot_up untyped
begin
   
   #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
   #- Sanity check.                                                                                                    #
   #  ============                                                                                                     #
   #                                                                                                                   #
   #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
 
   if use_itrace & generate_itrace then
      begin
         printf("Error: both generate_itrace and use_itrace are true.\n");
         exit (-1);
      end;

   if (btb_entries == 0) | ((btb_entries & branch_target_mask) ^= 0) then
      begin
         printf("Error: number of BTB entries must be a power of two.\n");
         exit (-1);
      end;

   for i=0 step 1 until btb_entries-1 do
   begin
      btb[i].my_address     = 0;
      btb[i].b1_branch_type = 0;
      btb[i].b1_target_address = 0;
   end;

   #for use with tournament_predictor
   forall local_pht=1;
   forall choice_pht=2; 
   forall pht=1;
   forall local_bht=0;
   global_hit_count=0;
   local_hit_count=0;

   forall gpr = 0;
   forall gpr_tag=0;

   sprintf(pointer(scratch),"%s/z-trace/%s.itrace", getenv("HOME"),myself.benchmark);
   if (generate_itrace) then 
      begin
         ex_trace = fast_open_file(scratch,"output");
         if ex_trace < 0 then
            begin
               perror("Open itrace file for output");
               printf("Looking for : %s\n",pointer(scratch));
               exit(-1);
            end;
      end;
   if (use_itrace) then 
      begin
         ex_trace = fast_open_file(scratch,"input");
         if ex_trace < 0 then
            begin
               perror("Open itrace file for input");
               printf("Looking for : %s\n",pointer(scratch));
               exit(-1);
            end;
      end;
end boot_up;

initialization boot_up;

controlflow
   bc1f__,
   beq__,
   bgez__,
   bgezal__,
   bgtz__,
   blez__,
   bltz__,
   bltzal__,
   bne__,
   j__,
   jal__,
   jalr__,
   jr__;

instruction category integer_arithmetic
   add,
   addi,
   addiu,
   addu,
   and,
   andi__,
   div,
   divu,
   lui,
   mfhi,
   mflo,
   mult,
   multu,
   nor,
   or,
   ori,
   sll,
   sllv,
   slt,
   slti,
   sltiu,
   sltu,
   sra,
   srav,
   srl,
   srlv,
   sub,
   subu,
   xor,
   xori;


instruction category conditional_branch
   beq__,
   bgez__,
   bgezal__,
   bgtz__,
   blez__,
   bltz__,
   bltzal__,
   bne__;

instruction category other
   break;

instruction category unconditional_branch
   j__,
   jal__,
   jalr__,
   jr__;

instruction category load
   lb,
   lbu,
   lh,
   lhu,
   lw,
   lwl,
   lwr,
   lwc1__;


instruction category store
   sb,
   sh,
   sw,
   swl,
   swr,
   swc1__;

instruction category float_arithmetic
   "cvt.d.w",
   "cvt.d.s",
   "cvt.s.w",
   "cvt.s.d",
   "div.d",
   "div.s",
   "mul.s",
   "mul.d",
   "add.s",
   "add.d",
   "neg.s",
   "neg.d",
   "sub.s",
   "sub.d",
   mfc1,
   mtc1,
   "c.cond.d",
   "c.cond.s",
   "abs.s",
   "abs.d",
   "mov.s",
   "mov.d",
   "trunc.w.s",
   "trunc.w.d";

instruction category float_conditional
    bc1f__,
    bc1t__;


# These are the registers we monitor duxecution.
#
#
monitor 
   gpr,
   linebreak,
   linebreak,
   linebreak,
   pc;
end;  # processor 

#- C-C++-Supplements  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#                                                                                                                      #
#  Description.                                                                                                        #
#    These supplements are necessary to support addressing modes for the assembler and O/S initialization for the      #
#    simulator.                                                                                                        #
#    It consists of two sections:                                                                                      #
#                                                                                                                      #
#    begin simulator                                                                                                   #
#    end simulator                                                                                                     #
#                                                                                                                      #
#    begin assembler                                                                                                   #
#    end assembler                                                                                                     #
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #

$include C-C++-Supplements.adl
